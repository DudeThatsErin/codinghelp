/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/codeFilesPlugin.ts
var import_obsidian4 = require("obsidian");

// src/common.ts
var DEFAULT_SETTINGS = {
  extensions: ["ts", "tsx", "js", "jsx", "json", "html", "py"],
  folding: true,
  lineNumbers: true,
  minimap: true,
  semanticValidation: true,
  syntaxValidation: true,
  isDark: true
};
var viewType = "code-editor";

// src/codeEditorView.ts
var import_obsidian = require("obsidian");
var _CodeEditorView = class extends import_obsidian.TextFileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.id = _CodeEditorView.i++;
    this.value = "";
  }
  getDisplayText() {
    var _a;
    return (_a = this.file) == null ? void 0 : _a.name;
  }
  getViewType() {
    return viewType;
  }
  getContext(file) {
    var _a, _b;
    return (_b = file == null ? void 0 : file.path) != null ? _b : (_a = this.file) == null ? void 0 : _a.path;
  }
  async onClose() {
    var _a;
    await super.onClose();
    (_a = this.iframe) == null ? void 0 : _a.remove();
  }
  async onLoadFile(file) {
    await super.onLoadFile(file);
    const theme = this.plugin.settings.isDark ? "vs-dark" : "vs";
    const queryParameters = new URLSearchParams();
    queryParameters.append("context", this.getContext(file));
    queryParameters.append("lang", this.getLanguage());
    queryParameters.append("theme", theme);
    queryParameters.append("background", "transparent");
    queryParameters.append("folding", this.plugin.settings.folding ? "true" : "false");
    queryParameters.append("lineNumbers", this.plugin.settings.lineNumbers ? "on" : "off");
    queryParameters.append("minimap", this.plugin.settings.minimap ? "true" : "false");
    queryParameters.append("javascriptDefaults", "true");
    queryParameters.append("typescriptDefaults", "true");
    queryParameters.append("javascriptDefaultsNoSemanticValidation", !this.plugin.settings.semanticValidation ? "true" : "false");
    queryParameters.append("typescriptDefaultsNoSemanticValidation", !this.plugin.settings.semanticValidation ? "true" : "false");
    queryParameters.append("javascriptDefaultsNoSyntaxValidation", !this.plugin.settings.syntaxValidation ? "true" : "false");
    queryParameters.append("typescriptDefaultsNoSyntaxValidation", !this.plugin.settings.syntaxValidation ? "true" : "false");
    this.iframe = document.createElement("iframe");
    this.iframe.src = `https://embeddable-monaco.lukasbach.com?${queryParameters.toString()}`;
    this.iframe.style.width = "100%";
    this.iframe.style.height = "100%";
    this.containerEl.getElementsByClassName("view-content")[0].style.overflow = "hidden";
    this.containerEl.getElementsByClassName("view-content")[0].append(this.iframe);
    window.addEventListener("message", ({ data }) => {
      switch (data.type) {
        case "ready": {
          this.send("change-value", { value: this.value });
          this.send("change-language", { language: this.getLanguage() });
          this.send("change-background", { background: "transparent", theme });
          break;
        }
        case "change": {
          if (data.context === this.getContext()) {
            this.value = data.value;
          } else {
          }
          break;
        }
      }
    });
  }
  async onUnloadFile(file) {
    var _a;
    await super.onUnloadFile(file);
    (_a = this.iframe) == null ? void 0 : _a.remove();
  }
  async onOpen() {
    await super.onOpen();
  }
  clear() {
    this.value = "";
    this.send("change-value", { value: "" });
  }
  getViewData() {
    return this.value;
  }
  setViewData(data, clear = false) {
    this.value = data;
    this.send("change-value", { value: data });
  }
  getLanguage() {
    var _a;
    switch ((_a = this.file) == null ? void 0 : _a.extension) {
      case "js":
      case "jsx":
        return "javascript";
      case "ts":
      case "tsx":
        return "typescript";
      case "json":
        return "json";
      case "py":
        return "python";
      case "css":
        return "css";
      case "html":
        return "html";
      case "cpp":
        return "cpp";
      case "graphql":
        return "graphql";
      case "java":
        return "java";
      case "php":
        return "php";
      case "sql":
        return "sql";
      case "yaml":
      case "yml":
        return "yaml";
      default:
        return "plaintext";
    }
  }
  send(type, payload) {
    var _a, _b;
    (_b = (_a = this.iframe) == null ? void 0 : _a.contentWindow) == null ? void 0 : _b.postMessage({
      type,
      ...payload
    }, "*");
  }
};
var CodeEditorView = _CodeEditorView;
CodeEditorView.i = 0;

// src/createCodeFileModal.ts
var import_obsidian2 = require("obsidian");
var CreateCodeFileModal = class extends import_obsidian2.Modal {
  constructor(plugin, parent) {
    super(plugin.app);
    this.plugin = plugin;
    this.fileName = "My Code File";
    this.fileExtension = this.plugin.settings.extensions[0];
    this.parent = parent != null ? parent : this.plugin.app.vault.getRoot();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.style.display = "flex";
    contentEl.style.alignItems = "center";
    const fileNameInput = new import_obsidian2.TextComponent(contentEl);
    fileNameInput.inputEl.style.flexGrow = "1";
    fileNameInput.inputEl.style.marginRight = "10px";
    fileNameInput.setValue(this.fileName);
    fileNameInput.inputEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.complete();
      }
    });
    fileNameInput.onChange((value) => this.fileName = value);
    const fileExtensionInput = new import_obsidian2.DropdownComponent(contentEl);
    fileExtensionInput.selectEl.style.marginRight = "10px";
    fileExtensionInput.addOptions(this.plugin.settings.extensions.reduce((acc, ext) => {
      acc[ext] = ext;
      return acc;
    }, {}));
    fileExtensionInput.setValue(this.fileExtension);
    fileExtensionInput.onChange((value) => this.fileExtension = value);
    fileExtensionInput.selectEl.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        this.complete();
      }
    });
    const submitButton = new import_obsidian2.ButtonComponent(contentEl);
    submitButton.setCta();
    submitButton.setButtonText("Create");
    submitButton.onClick(() => this.complete());
    fileNameInput.inputEl.focus();
  }
  async complete() {
    this.close();
    const parent = this.parent instanceof import_obsidian2.TFile ? this.parent.parent : this.parent;
    const newPath = `${parent.path}/${this.fileName}.${this.fileExtension}`;
    const existingFile = this.app.vault.getAbstractFileByPath(newPath);
    if (existingFile) {
      new import_obsidian2.Notice("File already exists");
      const leaf2 = this.app.workspace.getLeaf(true);
      leaf2.openFile(existingFile);
      return;
    }
    const newFile = await this.app.vault.create(
      newPath,
      "",
      {}
    );
    const leaf = this.app.workspace.getLeaf(true);
    leaf.openFile(newFile);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/codeFilesSettingsTab.ts
var import_obsidian3 = require("obsidian");
var CodeFilesSettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Code Files Settings" });
    new import_obsidian3.Setting(containerEl).setName("File Extensions").setDesc("Files with these extensions will show up in the sidebar, and will be available to create new files from. Seperated by commas. Changes to the file extensions need a restart to take effect.").addText((text) => text.setPlaceholder("js,ts").setValue(this.plugin.settings.extensions.join(",")).onChange(async (value) => {
      this.plugin.settings.extensions = value.split(",");
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Folding").setDesc("Editor will support code block folding.").addToggle((toggle) => toggle.setValue(this.plugin.settings.folding).onChange(async (value) => {
      this.plugin.settings.folding = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Line Numbers").setDesc("Editor will show line numbers.").addToggle((toggle) => toggle.setValue(this.plugin.settings.lineNumbers).onChange(async (value) => {
      this.plugin.settings.lineNumbers = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Minimap").setDesc("Editor will show a minimap.").addToggle((toggle) => toggle.setValue(this.plugin.settings.minimap).onChange(async (value) => {
      this.plugin.settings.minimap = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Semantic Validation").setDesc("Editor will show semantic validation errors.").addToggle((toggle) => toggle.setValue(this.plugin.settings.semanticValidation).onChange(async (value) => {
      this.plugin.settings.semanticValidation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Syntax Validation").setDesc("Editor will show syntax validation errors.").addToggle((toggle) => toggle.setValue(this.plugin.settings.syntaxValidation).onChange(async (value) => {
      this.plugin.settings.syntaxValidation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Dark Mode").setDesc("Is obsidian running with a dark theme?").addToggle((toggle) => toggle.setValue(this.plugin.settings.isDark).onChange(async (value) => {
      this.plugin.settings.isDark = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/codeFilesPlugin.ts
var CodeFilesPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(viewType, (leaf) => new CodeEditorView(leaf, this));
    this.registerExtensions(this.settings.extensions, viewType);
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Create Code File").setIcon("file-json").onClick(async () => {
            new CreateCodeFileModal(this, file).open();
          });
        });
      })
    );
    this.addRibbonIcon("file-json", "Create Code File", () => {
      new CreateCodeFileModal(this).open();
    });
    this.addCommand({
      id: "create",
      name: "Create new Code File",
      callback: () => {
        new CreateCodeFileModal(this).open();
      }
    });
    this.addSettingTab(new CodeFilesSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

// src/main.ts
var main_default = CodeFilesPlugin;
